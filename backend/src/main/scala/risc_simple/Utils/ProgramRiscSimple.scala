package risc_simple.program

import chisel3._
import chisel3.util._


object Assembler {

val prog = Array (
  0xa010003,     // r[1] <- 3                  
  0xa020007,     // r[2] <- 7
  0xa020008,     // r[2] <- 8              
  0x0050102,     // r[5] = A <-r[2] + r[1]         
  0x9000705,     // D[R[7]] = r[5]                
  0x8090700,    // r[9] = D[R[7]]                 
  0xc000003,   // jmp to ADD : infinite loop
  0xfeff456   //stop
)

val prog2 = Array (
  0xA000001,     // r[0] <- +1       
  0xA010002,     // r[1] <- +2                  
  0x0040200,     // r[4] <-r[2] + r[0]        
  0x0040400,     // r[4] <-r[4] + r[0]       
  0x0040400,     // r[4] <-r[4] + r[0]               
  0x1050301,    //  r[5] <-r[3] - r[1]
  0xA060009,    //   r[6] <- +9
  0x9000106,   //   M[r1] <- r[6]
  0x8070100,   //    r[7] <- M[r1]
  0x0010100,   //    r[1] <- r[1] + r[0]
  0x0060600,   //    r[6] <- r[6] + r[0]
  0x1040400,   //    r[4] <- r[4] - r[0]
  0xC020007,   //jnz to write
  0xFEFF456   //stop
)

val prog3 = Array (
  0xA000001,     // r[0] <- 1       
  0x0020000,     // r[2] <- r[0] + r[0]                  
  0x0030200,     // r[3] <-r[2] + r[0]        
  0x0040300,     // r[4] <-r[3] + r[0]       
  0x0010400,     // r[1] <-r[4] + r[0]               
  0x8020200,    //  r[2] <- M[r2]
  0x8030300,   //   r[3] <- M[r3]
  0x8040400,   //   r[4] <- M[r4]
  0x8050100,  //    r[5] <- M[r1]
  0x3040400,  //    r[4] <- r[4] << 1
  0x0040405,  //    r[4] <- r[4] + r[5]
  0x0010100,  //    r[1] <- r[1] + r[0]
  0x0030302,  //    r[3] <- r[3] + r[2]
  0xC020008,  //  jnz to M[r1]
  0x9000104,  //    M[r1] <- r4
  0xFEFF456  //stop
)

val data = Array (
  0xa,
  0xb,
  0xc,
  0xd,
  0xe,
  0xf
)
}
